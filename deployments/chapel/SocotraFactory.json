{
  "address": "0x876FD7DB0868102d6d862850f4CE1bc8A6E4E946",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "branchAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "parentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "branchId",
          "type": "uint256"
        }
      ],
      "name": "SplitBranch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "parentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitBranch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf02475ad51c203ba1921d8ecc0b73cfef6ad055f72b20fd4c6b2d586613883e7",
  "receipt": {
    "to": null,
    "from": "0x8679833F7Fe1e222c73aC0d5D44bEbC16Cadead3",
    "contractAddress": "0x876FD7DB0868102d6d862850f4CE1bc8A6E4E946",
    "transactionIndex": 0,
    "gasUsed": "3648157",
    "logsBloom": "0x
    "blockHash": "0x8588c1eec8ae5ebfa3b4c5b65143803a1e2f430e1c7694a424ed077a6ef7138d",
    "transactionHash": "0xf02475ad51c203ba1921d8ecc0b73cfef6ad055f72b20fd4c6b2d586613883e7",
    "logs": [],
    "blockNumber": 19417625,
    "cumulativeGasUsed": "3648157",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "504c552c4fc11ad7d3509b46fa178c25",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"branchAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"branchId\",\"type\":\"uint256\"}],\"name\":\"SplitBranch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitBranch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"splitBranch(address,uint256)\":{\"details\":\"create new branch for splint up subdao\",\"params\":{\"amount\":\"initial amount of parent token\",\"parentToken\":\"address of ERC20 token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SocotraFactory.sol\":\"SocotraFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SocotraBranchManager.sol\":{\"content\":\"pragma solidity ^0.8.11;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./SocotraLeafToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDelegateRegistry.sol\\\";\\nimport \\\"./VoteProxySigner.sol\\\";\\n\\ncontract SocotraBranchManager is Ownable {\\n    enum ManagerState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    address parentAddress;\\n\\n    struct Payout {\\n        uint256 amount;\\n        uint256 leafIndex;\\n        address receiver;\\n        bytes proof;\\n        bool isPaid;\\n    }\\n\\n    ManagerState managerState;\\n\\n    address snapshotDelegation = 0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446;\\n    address voteProxy;\\n\\n    uint256 public totalAllocPoint;\\n    uint256 registerTokens;\\n\\n    mapping(uint256 => Payout) payouts;\\n    uint256 payoutIds;\\n\\n    mapping(address => uint256) depositInfos;\\n    mapping(address => uint256) rewardInfos;\\n    uint256 totalReward;\\n\\n    mapping(uint256 => TokenMetadata) leafs;\\n    uint256 leafsCount;\\n\\n    struct TokenMetadata {\\n        address tokenAddress;\\n        uint256 rewardPoint;\\n    }\\n\\n    event ProxyRegistered(address proxy);\\n    event UpdateSnapshot(address newDelegation);\\n\\n    event RegisterLeaf();\\n\\n    constructor(address _parentToken, address _issuer) {\\n        parentAddress = _parentToken;\\n        _transferOwnership(_issuer);\\n        managerState = ManagerState.PENDING;\\n    }\\n\\n    /// @dev create vote proxy contract\\n    function registerSnapshotVoteProxy() public onlyOwner {\\n        require(managerState == ManagerState.PENDING, \\\"NOT_PENDING_STATE\\\");\\n        VoteProxySigner proxy = new VoteProxySigner(owner());\\n        voteProxy = address(proxy);\\n        managerState = ManagerState.INITIALIZED;\\n        emit ProxyRegistered(address(proxy));\\n    }\\n\\n    /// @dev Update snapshot delegation address\\n    /// @param snapshotAddr new snapshot address\\n    function changeSnapshotDelegation(address snapshotAddr) public onlyOwner {\\n        snapshotDelegation = snapshotAddr;\\n        emit UpdateSnapshot(snapshotAddr);\\n    }\\n\\n    /// @dev Delegate snapshot space id\\n    /// @param id snapshot space Id\\n    function delegateSpace(bytes32 id) public onlyOwner {\\n        require(\\n            managerState == ManagerState.INITIALIZED,\\n            \\\"NOT_INITIALIZED_VOTER\\\"\\n        );\\n        IDelegateRegistry(snapshotDelegation).setDelegate(\\n            id,\\n            snapshotDelegation\\n        );\\n    }\\n\\n    /// @dev Transfer Parent Token\\n    /// @param from from address\\n    /// @param target target address\\n    /// @param amount amount of token\\n    function _parentTransfer(\\n        address from,\\n        address target,\\n        uint256 amount\\n    ) internal {\\n        IERC20(parentAddress).transferFrom(from, target, amount);\\n    }\\n\\n    /// @dev Transfer Parent Token\\n    /// @param _rewardPoint reward allocation for address\\n    /// @param _name name of subtoken\\n    /// @param _symbol symbol of subtoken\\n    function addLeaf(\\n        uint256 _rewardPoint,\\n        string memory _name,\\n        string memory _symbol\\n    ) external onlyOwner {\\n        SocotraLeafTokenV0 leaf = new SocotraLeafTokenV0(_name, _symbol);\\n        leafs[leafsCount] = TokenMetadata({\\n            tokenAddress: address(leaf),\\n            rewardPoint: _rewardPoint\\n        });\\n        totalAllocPoint += _rewardPoint;\\n        leafsCount++;\\n    }\\n\\n    /// @dev Issue subtoken\\n    /// @param leafIndex reward allocation for address\\n    /// @param target name of subtoken\\n    /// @param amount symbol of subtoken\\n    function issueTo(\\n        uint256 leafIndex,\\n        address target,\\n        uint256 amount\\n    ) public onlyOwner {\\n        TokenMetadata memory fragement = leafs[leafIndex];\\n        SocotraLeafTokenV0(fragement.tokenAddress)._managerMint(target, amount);\\n    }\\n\\n    /// @dev Burn subtoken\\n    /// @param leafIndex reward allocation for address\\n    /// @param target name of subtoken\\n    /// @param amount symbol of subtoken\\n    function _burnFrom(\\n        uint256 leafIndex,\\n        address target,\\n        uint256 amount\\n    ) internal {\\n        TokenMetadata memory fragement = leafs[leafIndex];\\n        SocotraLeafTokenV0(fragement.tokenAddress)._managerBurn(target, amount);\\n    }\\n\\n    function depositParentAndAllocateReward(\\n        uint256 depositAmount,\\n        uint256 rewardAmount\\n    ) public {\\n        require(depositAmount != 0, \\\"NON_ZERO_DEPOSIT\\\");\\n        require(\\n            depositInfos[msg.sender] + depositAmount >=\\n                rewardInfos[msg.sender] + rewardAmount,\\n            \\\"EXCEED_DEPOSIT_VALUE\\\"\\n        );\\n        _parentTransfer(msg.sender, address(this), depositAmount);\\n        depositInfos[msg.sender] += depositAmount;\\n        rewardInfos[msg.sender] += rewardAmount;\\n    }\\n\\n    function withdrawParent(uint256 withdrawAmount, uint256 rewardAmount)\\n        public\\n    {\\n        require(withdrawAmount != 0, \\\"NON_ZERO_WITHDRAW\\\");\\n        require(\\n            depositInfos[msg.sender] - withdrawAmount >= 0 &&\\n                depositInfos[msg.sender] - withdrawAmount >= rewardAmount,\\n            \\\"EXCEED_DEPOSIT_VALUE\\\"\\n        );\\n\\n        _parentTransfer(address(this), msg.sender, withdrawAmount);\\n        depositInfos[msg.sender] -= withdrawAmount;\\n        rewardInfos[msg.sender] += rewardAmount;\\n    }\\n\\n    function requestPayout(\\n        uint256 amount,\\n        uint256 leafIndex,\\n        address receiver,\\n        bytes memory proof\\n    ) public {\\n        require(amount > 0, \\\"NO_ZERO_PAYPOUT\\\");\\n        IERC20(leafs[leafIndex].tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        payouts[payoutIds] = Payout({\\n            amount: amount,\\n            leafIndex: leafIndex,\\n            receiver: receiver,\\n            proof: proof,\\n            isPaid: false\\n        });\\n    }\\n\\n    function withdrawPayout(uint256 payoutId) public {\\n        Payout storage payout = payouts[payoutId];\\n        TokenMetadata memory leaf = leafs[payout.leafIndex];\\n        payout.isPaid = true;\\n        IERC20(leaf.tokenAddress).transferFrom(\\n            address(this),\\n            payout.receiver,\\n            payout.amount\\n        );\\n    }\\n\\n    function issuePayout(uint256 payoutId) external onlyOwner {\\n        Payout storage payout = payouts[payoutId];\\n        require(payout.isPaid == false, \\\"ALREADY_PAYOUT\\\");\\n        _burnFrom(payout.leafIndex, address(this), payout.amount);\\n        uint256 payoutAmount = calPayoutAmount(payout.amount);\\n        payout.isPaid = true;\\n        _parentTransfer(address(this), payout.receiver, payoutAmount);\\n    }\\n\\n    function calPayoutAmount(uint256 amount) public view returns (uint256) {\\n        return (amount * totalReward) / totalAllocPoint;\\n    }\\n}\\n\",\"keccak256\":\"0xf6f6001ea7cb5b2fa5cb4f2962e28e0f365d487dfc9943ccf9bf2fe9fe099d55\"},\"contracts/SocotraFactory.sol\":{\"content\":\"pragma solidity ^0.8.11;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./SocotraBranchManager.sol\\\";\\n\\ncontract SocotraFactory {\\n    using Address for address;\\n\\n    struct BranchInfo {\\n        address branchAddr;\\n        address parentToken;\\n        address issuer;\\n    }\\n\\n    uint256 branchIds;\\n    uint256 MIN_ISSUE_AMOUNT = 0;\\n\\n    mapping(uint256 => BranchInfo) branches;\\n\\n    event SplitBranch(\\n        address branchAddr,\\n        address parentToken,\\n        uint256 amount,\\n        address issuer,\\n        uint256 branchId\\n    );\\n\\n    constructor() {}\\n\\n    /// @dev create new branch for splint up subdao\\n    /// @param parentToken address of ERC20 token\\n    /// @param amount initial amount of parent token\\n    function splitBranch(address parentToken, uint256 amount) public {\\n        require(amount > MIN_ISSUE_AMOUNT, \\\"MUST_GREATER_THAN_MINIMUM\\\");\\n        SocotraBranchManager branch = new SocotraBranchManager(\\n            parentToken,\\n            msg.sender\\n        );\\n\\n        branches[branchIds] = BranchInfo({\\n            branchAddr: address(branch),\\n            parentToken: parentToken,\\n            issuer: msg.sender\\n        });\\n        IERC20(parentToken).transferFrom(msg.sender, address(branch), amount);\\n        emit SplitBranch(\\n            address(branch),\\n            parentToken,\\n            amount,\\n            msg.sender,\\n            branchIds\\n        );\\n        branchIds++;\\n    }\\n}\\n\",\"keccak256\":\"0xb35d3d606c19060f151e29a8f585b3490bc79b5dffb8fdf6548ddd78e9bda16c\"},\"contracts/SocotraLeafToken.sol\":{\"content\":\"pragma solidity ^0.8.11;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SocotraLeafTokenV0 is ERC20, Ownable {\\n    constructor(string memory _name, string memory _symbol)\\n        ERC20(_name, _symbol)\\n    {}\\n\\n    /// @dev burn token by manager\\n    /// @param target target address\\n    /// @param amount amount to burn\\n    function _managerBurn(address target, uint256 amount) external onlyOwner {\\n        _burn(target, amount);\\n    }\\n\\n    /// @dev mint token by manager\\n    /// @param target target address\\n    /// @param amount amount to mint\\n    function _managerMint(address target, uint256 amount) external onlyOwner {\\n        _mint(target, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc0424776efbbf5a8df7f99e1e0b02ca74e3198386ca618236dd503c4cdac67ec\"},\"contracts/VoteProxySigner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface Iauction {\\n    function isWinningSignature(bytes32 _hash, bytes memory _signature)\\n        external\\n        view\\n        returns (bool);\\n}\\n\\ncontract VoteProxySigner is Ownable, Iauction {\\n    mapping(address => bool) public voter;\\n\\n    event UpdateVoter(address member, bool approval);\\n\\n    constructor(address issuer) {\\n        voter[msg.sender] = true;\\n        voter[issuer] = true;\\n    }\\n\\n    function modifyTeam(address _member, bool _approval) public onlyOwner {\\n        voter[_member] = _approval;\\n        emit UpdateVoter(_member, _approval);\\n    }\\n\\n    function isWinningSignature(bytes32 _hash, bytes memory _signature)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        address signer = recover(_hash, _signature);\\n        return voter[signer];\\n    }\\n\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\\n        external\\n        view\\n        returns (bytes4)\\n    {\\n        // Validate signatures\\n        if (isWinningSignature(_hash, _signature) == true) {\\n            return 0x1626ba7e;\\n        } else {\\n            return 0xffffffff;\\n        }\\n    }\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOwner returns (bool, bytes memory) {\\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\\n        return (success, result);\\n    }\\n\\n    /* Recovery Part */\\n\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address, RecoverError)\\n    {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(\\n                vs,\\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            )\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n}\\n\",\"keccak256\":\"0xe83f69c9c4492409af51eb2436e108f8b7275da99ab1f538fe5fa7f84d466afe\",\"license\":\"MIT\"},\"contracts/interfaces/IDelegateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IDelegateRegistry {\\n    // Using these events it is possible to process the events to build up reverse lookups.\\n    // The indeces allow it to be very partial about how to build this lookup (e.g. only for a specific delegate).\\n    event SetDelegate(\\n        address indexed delegator,\\n        bytes32 indexed id,\\n        address indexed delegate\\n    );\\n    event ClearDelegate(\\n        address indexed delegator,\\n        bytes32 indexed id,\\n        address indexed delegate\\n    );\\n\\n    /// @dev Sets a delegate for the msg.sender and a specific id.\\n    ///      The combination of msg.sender and the id can be seen as a unique key.\\n    /// @param id Id for which the delegate should be set\\n    /// @param delegate Address of the delegate\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    /// @dev Clears a delegate for the msg.sender and a specific id.\\n    ///      The combination of msg.sender and the id can be seen as a unique key.\\n    /// @param id Id for which the delegate should be set\\n    function clearDelegate(bytes32 id) external;\\n}\\n\",\"keccak256\":\"0xce2249c1a8c1b2c2d91ceaab1f68a6e4c047e4d3138b43c64f85cf5f7187ed1e\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080604052600060015534801561001557600080fd5b50614169806100256000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150f10e114610030575b600080fd5b61004361003e3660046102bb565b610045565b005b60015481116100b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d5553545f475245415445525f5448414e5f4d494e494d554d00000000000000604482015260640160405180910390fd5b600082336040516100c4906102ae565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604001604051809103906000f080158015610104573d6000803e3d6000fd5b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff838116808352878216602080850182815233868801818152600080548152600294859052899020975188549088167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161789559251600189018054918916918516919091179055519690920180549690951695169490941790925592517f23b872dd0000000000000000000000000000000000000000000000000000000081526004810192909252602482019290925260448101859052919250906323b872dd906064016020604051808303816000875af1158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190610300565b506000546040805173ffffffffffffffffffffffffffffffffffffffff8481168252861660208201528082018590523360608201526080810192909252517fe7ba7c736ee01b2bba2f5926d861c1813ceb0babfe0cd485768222ceb296e1d79181900360a00190a16000805490806102a483610329565b9190505550505050565b613daa8061038a83390190565b600080604083850312156102ce57600080fd5b823573ffffffffffffffffffffffffffffffffffffffff811681146102f257600080fd5b946020939093013593505050565b60006020828403121561031257600080fd5b8151801515811461032257600080fd5b9392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610382577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fe6080604052600280546001600160a01b03191673469788fe6e9e9681c6ebf3bf78e7fd26fc0154461790553480156200003757600080fd5b5060405162003daa38038062003daa8339810160408190526200005a9162000113565b6200006533620000a6565b600180546001600160a01b0319166001600160a01b0384161790556200008b81620000a6565b50506001805460ff60a01b1916600160a01b1790556200014b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010e57600080fd5b919050565b600080604083850312156200012757600080fd5b6200013283620000f6565b91506200014260208401620000f6565b90509250929050565b613c4f806200015b6000396000f3fe60806040523480156200001157600080fd5b5060043610620001095760003560e01c806398eba7eb11620000a3578063c6ac39f0116200006e578063c6ac39f01462000218578063c6c363d11462000222578063cac9744b1462000239578063f2fde38b146200025057600080fd5b806398eba7eb14620001bc5780639cf609a314620001d3578063a41a0c1614620001ea578063b21c7935146200020157600080fd5b806355ef20e211620000e457806355ef20e2146200015b578063715018a6146200017257806386728d2c146200017c5780638da5cb5b146200019357600080fd5b806304abebb8146200010e578063160fb908146200012757806317caf6f1146200013e575b600080fd5b620001256200011f366004620013a9565b62000267565b005b6200012562000138366004620013cc565b620003a1565b6200014860045481565b6040519081526020015b60405180910390f35b620001256200016c366004620014da565b6200051d565b620001256200066f565b620001256200018d36600462001578565b620006e6565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200162000152565b62000125620001cd366004620013a9565b620007c9565b62000148620001e4366004620013cc565b620008dd565b62000125620001fb36600462001596565b62000904565b6200012562000212366004620013cc565b62000aec565b6200012562000c06565b6200012562000233366004620013cc565b62000e0a565b620001256200024a36600462001612565b62000f5c565b620001256200026136600462001578565b62001081565b81620002ba5760405162461bcd60e51b815260206004820152601060248201527f4e4f4e5f5a45524f5f4445504f5349540000000000000000000000000000000060448201526064015b60405180910390fd5b33600090815260096020526040902054620002d790829062001679565b33600090815260086020526040902054620002f490849062001679565b1015620003445760405162461bcd60e51b815260206004820152601460248201527f4558434545445f4445504f5349545f56414c55450000000000000000000000006044820152606401620002b1565b6200035133308462001183565b33600090815260086020526040812080548492906200037290849062001679565b909155505033600090815260096020526040812080548392906200039890849062001679565b90915550505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200040a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b1565b600260015474010000000000000000000000000000000000000000900460ff1660028111156200043e576200043e62001694565b146200048d5760405162461bcd60e51b815260206004820152601560248201527f4e4f545f494e495449414c495a45445f564f54455200000000000000000000006044820152606401620002b1565b6002546040517fbd86e5080000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116602482018190529063bd86e50890604401600060405180830381600087803b1580156200050157600080fd5b505af115801562000516573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314620005865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b1565b600082826040516200059890620012e7565b620005a592919062001731565b604051809103906000f080158015620005c2573d6000803e3d6000fd5b5060408051808201825273ffffffffffffffffffffffffffffffffffffffff83811682526020808301898152600c546000908152600b909252938120925183547fffffffffffffffffffffffff000000000000000000000000000000000000000016921691909117825591516001909101556004805492935086929091906200064d90849062001679565b9091555050600c8054906000620006648362001763565b919050555050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314620006d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b1565b620006e46000620011eb565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200074f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b1565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f54413e4029c4b34d3b2d59e86cbd4e4c704bd444e9fb1ade66859555d9195775906020015b60405180910390a150565b81620008185760405162461bcd60e51b815260206004820152601160248201527f4e4f4e5f5a45524f5f57495448445241570000000000000000000000000000006044820152606401620002b1565b33600090815260086020526040812054620008359084906200179f565b101580156200086157503360009081526008602052604090205481906200085e9084906200179f565b10155b620008af5760405162461bcd60e51b815260206004820152601460248201527f4558434545445f4445504f5349545f56414c55450000000000000000000000006044820152606401620002b1565b620008bc30338462001183565b3360009081526008602052604081208054849290620003729084906200179f565b6000600454600a5483620008f29190620017b9565b620008fe9190620017f9565b92915050565b60008411620009565760405162461bcd60e51b815260206004820152600f60248201527f4e4f5f5a45524f5f504159504f555400000000000000000000000000000000006044820152606401620002b1565b6000838152600b6020526040908190205490517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810186905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015620009e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a07919062001835565b506040805160a081018252858152602080820186815273ffffffffffffffffffffffffffffffffffffffff86811684860190815260608501878152600060808701819052600754815260068652969096208551815592516001840155516002830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919092161790559251805192939262000aac9260038501920190620012f5565b5060809190910151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905550505050565b60008181526006602090815260408083206001808201548552600b84529382902082518084018452815473ffffffffffffffffffffffffffffffffffffffff9081168083529287015495820195909552600480840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169097179096556002830154835494517f23b872dd000000000000000000000000000000000000000000000000000000008152309781019790975290941660248601526044850192909252926323b872dd906064015b6020604051808303816000875af115801562000bda573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c00919062001835565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000c6f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b1565b6001805474010000000000000000000000000000000000000000900460ff16600281111562000ca25762000ca262001694565b1462000cf15760405162461bcd60e51b815260206004820152601160248201527f4e4f545f50454e44494e475f53544154450000000000000000000000000000006044820152606401620002b1565b6000805473ffffffffffffffffffffffffffffffffffffffff1660405162000d199062001384565b73ffffffffffffffffffffffffffffffffffffffff9091168152602001604051809103906000f08015801562000d53573d6000803e3d6000fd5b50600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740200000000000000000000000000000000000000001790556040519081529091507f63a40fb1ca0677d69a93f19d3e96304954abf2c58888d1a1f940d91d5a550a9090602001620007be565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000e735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b1565b6000818152600660205260409020600481015460ff161562000ed85760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f5041594f55540000000000000000000000000000000000006044820152606401620002b1565b62000eed816001015430836000015462001260565b600062000efe8260000154620008dd565b6004830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600283015490915062000f5790309073ffffffffffffffffffffffffffffffffffffffff168362001183565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000fc55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b1565b6000838152600b602090815260409182902082518084018452815473ffffffffffffffffffffffffffffffffffffffff9081168083526001909301549382019390935292517f575dbebe0000000000000000000000000000000000000000000000000000000081529185166004830152602482018490529063575dbebe906044015b600060405180830381600087803b1580156200106257600080fd5b505af115801562001077573d6000803e3d6000fd5b5050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314620010ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002b1565b73ffffffffffffffffffffffffffffffffffffffff8116620011755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620002b1565b6200118081620011eb565b50565b6001546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152848116602483015260448201849052909116906323b872dd9060640162000bba565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000838152600b602090815260409182902082518084018452815473ffffffffffffffffffffffffffffffffffffffff9081168083526001909301549382019390935292517f63fb8cf9000000000000000000000000000000000000000000000000000000008152918516600483015260248201849052906363fb8cf99060440162001047565b61140180620018b083390190565b828054620013039062001859565b90600052602060002090601f01602090048101928262001327576000855562001372565b82601f106200134257805160ff191683800117855562001372565b8280016001018555821562001372579182015b828111156200137257825182559160200191906001019062001355565b506200138092915062001392565b5090565b610f698062002cb183390190565b5b8082111562001380576000815560010162001393565b60008060408385031215620013bd57600080fd5b50508035926020909101359150565b600060208284031215620013df57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff80841115620014335762001433620013e6565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156200147c576200147c620013e6565b816040528093508581528686860111156200149657600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112620014c257600080fd5b620014d38383356020850162001415565b9392505050565b600080600060608486031215620014f057600080fd5b83359250602084013567ffffffffffffffff808211156200151057600080fd5b6200151e87838801620014b0565b935060408601359150808211156200153557600080fd5b506200154486828701620014b0565b9150509250925092565b803573ffffffffffffffffffffffffffffffffffffffff811681146200157357600080fd5b919050565b6000602082840312156200158b57600080fd5b620014d3826200154e565b60008060008060808587031215620015ad57600080fd5b8435935060208501359250620015c6604086016200154e565b9150606085013567ffffffffffffffff811115620015e357600080fd5b8501601f81018713620015f557600080fd5b620016068782356020840162001415565b91505092959194509250565b6000806000606084860312156200162857600080fd5b833592506200163a602085016200154e565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156200168f576200168f6200164a565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000815180845260005b81811015620016eb57602081850181015186830182015201620016cd565b81811115620016fe576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b604081526000620017466040830185620016c3565b82810360208401526200175a8185620016c3565b95945050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200179857620017986200164a565b5060010190565b600082821015620017b457620017b46200164a565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620017f457620017f46200164a565b500290565b60008262001830577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000602082840312156200184857600080fd5b81518015158114620014d357600080fd5b600181811c908216806200186e57607f821691505b60208210811415620018a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fe60806040523480156200001157600080fd5b506040516200140138038062001401833981016040819052620000349162000251565b8151829082906200004d906003906020850190620000de565b50805162000063906004906020840190620000de565b505050620000806200007a6200008860201b60201c565b6200008c565b5050620002f8565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ec90620002bb565b90600052602060002090601f0160209004810192826200011057600085556200015b565b82601f106200012b57805160ff19168380011785556200015b565b828001600101855582156200015b579182015b828111156200015b5782518255916020019190600101906200013e565b50620001699291506200016d565b5090565b5b808211156200016957600081556001016200016e565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001ac57600080fd5b81516001600160401b0380821115620001c957620001c962000184565b604051601f8301601f19908116603f01168101908282118183101715620001f457620001f462000184565b816040528381526020925086838588010111156200021157600080fd5b600091505b8382101562000235578582018301518183018401529082019062000216565b83821115620002475760008385830101525b9695505050505050565b600080604083850312156200026557600080fd5b82516001600160401b03808211156200027d57600080fd5b6200028b868387016200019a565b93506020850151915080821115620002a257600080fd5b50620002b1858286016200019a565b9150509250929050565b600181811c90821680620002d057607f821691505b60208210811415620002f257634e487b7160e01b600052602260045260246000fd5b50919050565b6110f980620003086000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610223578063a9059cbb14610236578063dd62ed3e14610249578063f2fde38b1461028f57600080fd5b806370a08231146101b5578063715018a6146101eb5780638da5cb5b146101f357806395d89b411461021b57600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a578063575dbebe1461018d57806363fb8cf9146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d6102a2565b60405161011a9190610eba565b60405180910390f35b610136610131366004610f56565b610334565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610f80565b61034c565b6040516012815260200161011a565b610136610188366004610f56565b610370565b6101a061019b366004610f56565b6103bc565b005b6101a06101b0366004610f56565b610436565b61014a6101c3366004610fbc565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101a06104a7565b60055460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011a565b61010d61051a565b610136610231366004610f56565b610529565b610136610244366004610f56565b6105e0565b61014a610257366004610fde565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6101a061029d366004610fbc565b6105ee565b6060600380546102b190611011565b80601f01602080910402602001604051908101604052809291908181526020018280546102dd90611011565b801561032a5780601f106102ff5761010080835404028352916020019161032a565b820191906000526020600020905b81548152906001019060200180831161030d57829003601f168201915b5050505050905090565b6000336103428185856106ea565b5060019392505050565b60003361035a85828561086a565b610365858585610927565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061034290829086906103b7908790611094565b6106ea565b60055473ffffffffffffffffffffffffffffffffffffffff1633146104285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104328282610b8c565b5050565b60055473ffffffffffffffffffffffffffffffffffffffff16331461049d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041f565b6104328282610c92565b60055473ffffffffffffffffffffffffffffffffffffffff16331461050e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041f565b6105186000610e43565b565b6060600480546102b190611011565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156105d35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161041f565b61036582868684036106ea565b600033610342818585610927565b60055473ffffffffffffffffffffffffffffffffffffffff1633146106555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161041f565b73ffffffffffffffffffffffffffffffffffffffff81166106de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161041f565b6106e781610e43565b50565b73ffffffffffffffffffffffffffffffffffffffff83166107725760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161041f565b73ffffffffffffffffffffffffffffffffffffffff82166107fb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161041f565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461092157818110156109145760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161041f565b61092184848484036106ea565b50505050565b73ffffffffffffffffffffffffffffffffffffffff83166109b05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161041f565b73ffffffffffffffffffffffffffffffffffffffff8216610a395760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161041f565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610ad55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161041f565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610b19908490611094565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b7f91815260200190565b60405180910390a3610921565b73ffffffffffffffffffffffffffffffffffffffff8216610bef5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161041f565b8060026000828254610c019190611094565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290610c3b908490611094565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610d1b5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161041f565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015610db75760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161041f565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120838303905560028054849290610df39084906110ac565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161085d565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b81811015610ee757858101830151858201604001528201610ecb565b81811115610ef9576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f5157600080fd5b919050565b60008060408385031215610f6957600080fd5b610f7283610f2d565b946020939093013593505050565b600080600060608486031215610f9557600080fd5b610f9e84610f2d565b9250610fac60208501610f2d565b9150604084013590509250925092565b600060208284031215610fce57600080fd5b610fd782610f2d565b9392505050565b60008060408385031215610ff157600080fd5b610ffa83610f2d565b915061100860208401610f2d565b90509250929050565b600181811c9082168061102557607f821691505b6020821081141561105f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156110a7576110a7611065565b500190565b6000828210156110be576110be611065565b50039056fea2646970667358221220e1538ac2afebc2d51a2053ee7b6f6a8bdc2a268937b14a3f3a637c2f6a1f2d1064736f6c634300080b0033608060405234801561001057600080fd5b50604051610f69380380610f6983398101604081905261002f916100c5565b61003833610075565b336000908152600160208190526040808320805460ff1990811684179091556001600160a01b0394909416835290912080549092161790556100f5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d757600080fd5b81516001600160a01b03811681146100ee57600080fd5b9392505050565b610e65806101046000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ac0679a61161005b578063ac0679a61461012b578063af0dbe541461013e578063b61d27f614610161578063f2fde38b1461018257600080fd5b80631626ba7e1461008d5780635d3a8999146100d6578063715018a6146100f95780638da5cb5b14610103575b600080fd5b6100a061009b366004610b45565b610195565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6100e96100e4366004610bc0565b610232565b60405190151581526020016100cd565b61010161026f565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100cd565b610101610139366004610cc2565b610301565b6100e961014c366004610cfe565b60016020526000908152604090205460ff1681565b61017461016f366004610d19565b610410565b6040516100cd929190610d73565b610101610190366004610cfe565b610514565b60006101d78484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061023292505050565b15156001141561020857507f1626ba7e0000000000000000000000000000000000000000000000000000000061022b565b507fffffffff000000000000000000000000000000000000000000000000000000005b9392505050565b60008061023f8484610644565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff16949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6102ff6000610668565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ec565b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fb43d5232746338e9c1144f9527dfc24742e0c8ff638df3bb5d21cefbb83480f2910160405180910390a15050565b6000805460609073ffffffffffffffffffffffffffffffffffffffff163314610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ec565b6000808773ffffffffffffffffffffffffffffffffffffffff168787876040516104c0929190610df0565b60006040518083038185875af1925050503d80600081146104fd576040519150601f19603f3d011682016040523d82523d6000602084013e610502565b606091505b50909450925050505b94509492505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ec565b73ffffffffffffffffffffffffffffffffffffffff8116610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102ec565b61064181610668565b50565b600080600061065385856106dd565b915091506106608161074d565b509392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808251604114156107145760208301516040840151606085015160001a610708878285856109a6565b94509450505050610746565b82516040141561073e5760208301516040840151610733868383610abb565b935093505050610746565b506000905060025b9250929050565b600081600481111561076157610761610e00565b141561076a5750565b600181600481111561077e5761077e610e00565b14156107e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102ec565b60028160048111156107fa576107fa610e00565b1415610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102ec565b600381600481111561087657610876610e00565b1415610904576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016102ec565b600481600481111561091857610918610e00565b1415610641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016102ec565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156109dd575060009050600361050b565b8460ff16601b141580156109f557508460ff16601c14155b15610a06575060009050600461050b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610a5a573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610aae5760006001925092505061050b565b9660009650945050505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b01610af5878288856109a6565b935093505050935093915050565b60008083601f840112610b1557600080fd5b50813567ffffffffffffffff811115610b2d57600080fd5b60208301915083602082850101111561074657600080fd5b600080600060408486031215610b5a57600080fd5b83359250602084013567ffffffffffffffff811115610b7857600080fd5b610b8486828701610b03565b9497909650939450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215610bd357600080fd5b82359150602083013567ffffffffffffffff80821115610bf257600080fd5b818501915085601f830112610c0657600080fd5b813581811115610c1857610c18610b91565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610c5e57610c5e610b91565b81604052828152886020848701011115610c7757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610cbd57600080fd5b919050565b60008060408385031215610cd557600080fd5b610cde83610c99565b915060208301358015158114610cf357600080fd5b809150509250929050565b600060208284031215610d1057600080fd5b61022b82610c99565b60008060008060608587031215610d2f57600080fd5b610d3885610c99565b935060208501359250604085013567ffffffffffffffff811115610d5b57600080fd5b610d6787828801610b03565b95989497509550505050565b821515815260006020604081840152835180604085015260005b81811015610da957858101830151858201606001528201610d8d565b81811115610dbb576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220b5a4c59d05cd4fd9cbe41401331cb36c635058ff057fd32432a5458fea79f78f64736f6c634300080b0033a2646970667358221220709f2b2213755ca894a9e0593f36438bd6d0c751590885a6b69d73dea3ed027f64736f6c634300080b0033a26469706673582212208fccda36f0347daeff071efc441aa15781c69da60c45a50e179fed2d35d7940d64736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "splitBranch(address,uint256)": {
        "details": "create new branch for splint up subdao",
        "params": {
          "amount": "initial amount of parent token",
          "parentToken": "address of ERC20 token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1710,
        "contract": "contracts/SocotraFactory.sol:SocotraFactory",
        "label": "branchIds",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1713,
        "contract": "contracts/SocotraFactory.sol:SocotraFactory",
        "label": "MIN_ISSUE_AMOUNT",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1718,
        "contract": "contracts/SocotraFactory.sol:SocotraFactory",
        "label": "branches",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(BranchInfo)1708_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(BranchInfo)1708_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SocotraFactory.BranchInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BranchInfo)1708_storage"
      },
      "t_struct(BranchInfo)1708_storage": {
        "encoding": "inplace",
        "label": "struct SocotraFactory.BranchInfo",
        "members": [
          {
            "astId": 1703,
            "contract": "contracts/SocotraFactory.sol:SocotraFactory",
            "label": "branchAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1705,
            "contract": "contracts/SocotraFactory.sol:SocotraFactory",
            "label": "parentToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1707,
            "contract": "contracts/SocotraFactory.sol:SocotraFactory",
            "label": "issuer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}