{
  "address": "0xBEF13CBAF3f914073A77EBC57B7e9c3F9DcE81B4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "CreateVoter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "branchAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "parentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "branchId",
          "type": "uint256"
        }
      ],
      "name": "SplitBranch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "createVoteProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "socotraBranchManagerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "parentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "splitBranch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x11b9f8a9cf59a76a9a3af065f4f20a018fe24b210c7fcf9aff38123dade26aa1",
  "receipt": {
    "to": null,
    "from": "0x76Ec3E390d68bABf545539aF3eD4f548505f9Ffe",
    "contractAddress": "0xBEF13CBAF3f914073A77EBC57B7e9c3F9DcE81B4",
    "transactionIndex": 11,
    "gasUsed": "6261120",
    "logsBloom": "0x
    "blockHash": "0x02444f3cfec6f50353ffed93e7d7dba8a6955ea8e37004b67cd39e7893c5639f",
    "transactionHash": "0x11b9f8a9cf59a76a9a3af065f4f20a018fe24b210c7fcf9aff38123dade26aa1",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 10719707,
        "transactionHash": "0x11b9f8a9cf59a76a9a3af065f4f20a018fe24b210c7fcf9aff38123dade26aa1",
        "address": "0x47c4E7c8ceCcb6b486819D3BEbb080D33e0BF122",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bef13cbaf3f914073a77ebc57b7e9c3f9dce81b4"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x02444f3cfec6f50353ffed93e7d7dba8a6955ea8e37004b67cd39e7893c5639f"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10719707,
        "transactionHash": "0x11b9f8a9cf59a76a9a3af065f4f20a018fe24b210c7fcf9aff38123dade26aa1",
        "address": "0xfE1acb98e624F58519D89E8De15aed7A574acdD8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bef13cbaf3f914073a77ebc57b7e9c3f9dce81b4"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x02444f3cfec6f50353ffed93e7d7dba8a6955ea8e37004b67cd39e7893c5639f"
      }
    ],
    "blockNumber": 10719707,
    "cumulativeGasUsed": "9579304",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "066fc764a5e09c3566a2547b6f8189c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"CreateVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"branchAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"branchId\",\"type\":\"uint256\"}],\"name\":\"SplitBranch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"createVoteProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socotraBranchManagerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"splitBranch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"splitBranch(address,uint256,string,string,string,string)\":{\"details\":\"create new branch for splint up subdao\",\"params\":{\"amount\":\"initial amount of parent token\",\"imageUrl\":\"link to url of subdao's image\",\"name\":\"name of subdao\",\"parentToken\":\"address of ERC20 token\",\"tokenName\":\"name of subdao token\",\"tokenSymbol\":\"symbol of subdao token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SocotraFactory.sol\":\"SocotraFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor is IERC165 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their intepepretation also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0xb8c693f945c199962aff3fc79e5ea522610e91d0878dcfa2e83b39477c033c4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../governance/utils/IVotes.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is IVotes, ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x7fd2492be0468be4662081ee25cde38a31e4a0ceca0fed10160462389013910f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20VotesComp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20VotesComp.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Votes.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound's voting and delegation. This version exactly matches Compound's\\n * interface, with the drawback of only supporting supply up to (2^96^ - 1).\\n *\\n * NOTE: You should use this contract if you need exact compatibility with COMP (for example in order to use your token\\n * with Governor Alpha or Bravo) and if you are sure the supply cap of 2^96^ is enough for you. Otherwise, use the\\n * {ERC20Votes} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getCurrentVotes} and {getPriorVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20VotesComp is ERC20Votes {\\n    /**\\n     * @dev Comp version of the {getVotes} accessor, with `uint96` return type.\\n     */\\n    function getCurrentVotes(address account) external view virtual returns (uint96) {\\n        return SafeCast.toUint96(getVotes(account));\\n    }\\n\\n    /**\\n     * @dev Comp version of the {getPastVotes} accessor, with `uint96` return type.\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view virtual returns (uint96) {\\n        return SafeCast.toUint96(getPastVotes(account, blockNumber));\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Reduced to `type(uint96).max` (2^96^ - 1) to fit COMP interface.\\n     */\\n    function _maxSupply() internal view virtual override returns (uint224) {\\n        return type(uint96).max;\\n    }\\n}\\n\",\"keccak256\":\"0x3e2cf78abe35170695b26fb9f820fe7bfeed607604f4d6c1261f811704c79f16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x07536242e24ee7067295d32c08e495a33e605f3c52f8ee4ec3bdcb7a351313d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/SocotraBranchManager.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.11;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDelegateRegistry.sol\\\";\\nimport \\\"./SocotraVoteToken.sol\\\";\\nimport \\\"./interfaces/ISocotraFactory.sol\\\";\\nimport \\\"./interfaces/IVoteProxySigner.sol\\\";\\n\\ncontract SocotraBranchManager is Ownable {\\n    enum ManagerState {\\n        NONE,\\n        PENDING,\\n        READY_OFF_CHAIN,\\n        READY_ON_CHAIN\\n    }\\n\\n    struct BranchInfo {\\n        address parentTokenAddress;\\n        address voteTokenAddress;\\n        string name;\\n        string imageUrl;\\n    }\\n\\n    struct MemberInfo {\\n        uint256 availableToken;\\n        uint256 totalToken;\\n        uint256 claimingToken;\\n        uint256 rewardAmount;\\n    }\\n\\n    struct AllocationInput {\\n        address memberAddr;\\n        uint256 voteAmount;\\n        uint256 rewardAmount;\\n    }\\n\\n    struct Payout {\\n        uint256 amount;\\n        address issuer;\\n        address receiver;\\n        string proof;\\n        bool isPaid;\\n    }\\n    ISocotraFactory public factory;\\n\\n    ManagerState managerState;\\n\\n    BranchInfo public branchInfo;\\n\\n    address snapshotDelegation = 0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446;\\n    address voteProxy;\\n\\n    uint256 public totalAllocation;\\n    mapping(address => MemberInfo) members;\\n\\n    mapping(uint256 => Payout) payouts;\\n    uint256 payoutCount;\\n\\n    mapping(address => uint256) depositInfos;\\n    mapping(address => uint256) rewardInfos;\\n    uint256 totalReward;\\n    uint256 totalToken;\\n\\n    event ProxyRegistered(address proxy);\\n    event UpdateSnapshot(address newDelegation);\\n    event DelegateSpace(bytes32 spaceId);\\n\\n    event RegisterMember(\\n        address memberAddr,\\n        uint256 voteAmount,\\n        uint256 rewardAmount\\n    );\\n    event ClaimToken(address memberAddr, uint256 tokenAmount);\\n    event RequestPayout(\\n        uint256 id,\\n        uint256 amount,\\n        address issuer,\\n        address receiver,\\n        string proof\\n    );\\n    event WithdrawPayout(uint256 id);\\n    event IssuePayout(uint256 id);\\n\\n    function init(\\n        address _factory,\\n        address _parentToken,\\n        address _issuer,\\n        string memory _name,\\n        string memory _imageUrl,\\n        string memory _tokenName,\\n        string memory _tokenSymbol\\n    ) external {\\n        require(managerState == ManagerState.NONE, \\\"Already initialized!\\\");\\n        factory = ISocotraFactory(_factory);\\n        branchInfo.parentTokenAddress = _parentToken;\\n        branchInfo.name = _name;\\n        branchInfo.imageUrl = _imageUrl;\\n        _transferOwnership(_issuer);\\n        _initToken(_tokenName, _tokenSymbol);\\n        managerState = ManagerState.PENDING;\\n    }\\n\\n    function delegatesParentBySig(\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external onlyOwner {\\n        require(\\n            managerState == ManagerState.READY_OFF_CHAIN,\\n            \\\"NOT_INITIALIZED_STATE\\\"\\n        );\\n        ERC20Votes(branchInfo.parentTokenAddress).delegateBySig(\\n            voteProxy,\\n            nonce,\\n            expiry,\\n            v,\\n            r,\\n            s\\n        );\\n        managerState = ManagerState.READY_ON_CHAIN;\\n    }\\n\\n    /// @dev create vote proxy contract\\n    function registerSnapshotVoteProxy() public onlyOwner {\\n        require(managerState == ManagerState.PENDING, \\\"NOT_PENDING_STATE\\\");\\n        voteProxy = factory.createVoteProxy(owner());\\n        managerState = ManagerState.READY_OFF_CHAIN;\\n        emit ProxyRegistered(voteProxy);\\n    }\\n\\n    /// @dev Update snapshot delegation address\\n    /// @param snapshotAddr new snapshot address\\n    function changeSnapshotDelegation(address snapshotAddr) public onlyOwner {\\n        snapshotDelegation = snapshotAddr;\\n        emit UpdateSnapshot(snapshotAddr);\\n    }\\n\\n    /// @dev Delegate snapshot space id\\n    /// @param id snapshot space Id\\n    function delegateSpace(bytes32 id) external onlyOwner {\\n        require(\\n            uint8(managerState) >= uint8(ManagerState.READY_OFF_CHAIN),\\n            \\\"NOT_INITIALIZED_VOTER\\\"\\n        );\\n        IDelegateRegistry(snapshotDelegation).setDelegate(id, voteProxy);\\n\\n        emit DelegateSpace(id);\\n    }\\n\\n    /// @dev Delegate snapshot space id\\n    /// @param member voter address\\n    /// @param approval permission for voter\\n    function updateSigner(address member, bool approval) external onlyOwner {\\n        require(\\n            uint8(managerState) >= uint8(ManagerState.READY_OFF_CHAIN),\\n            \\\"NOT_INITIALIZED_VOTER\\\"\\n        );\\n        IVoteProxySigner(voteProxy).modifyTeam(member, approval);\\n    }\\n\\n    /// @dev Add allocation for member\\n    /// @param memberAddr address of a member\\n    /// @param voteAmount amount of voting token member can claim\\n    /// @param rewardAmount amount of parent token member can claim as reward\\n    function addMemberAllocation(\\n        address memberAddr,\\n        uint256 voteAmount,\\n        uint256 rewardAmount\\n    ) public onlyOwner {\\n        require(voteAmount > 0, \\\"NON_ZERO_AMOUNT\\\");\\n        uint256 totalParent = IERC20(branchInfo.parentTokenAddress).balanceOf(\\n            address(this)\\n        );\\n        require(\\n            totalAllocation + rewardAmount <= totalParent,\\n            \\\"NOT_EXCEED_TOKEN_LIMIT\\\"\\n        );\\n        MemberInfo storage member = members[memberAddr];\\n        member.availableToken += voteAmount;\\n        member.totalToken += voteAmount;\\n        member.rewardAmount += rewardAmount;\\n        totalAllocation += rewardAmount;\\n\\n        emit RegisterMember(memberAddr, voteAmount, rewardAmount);\\n    }\\n\\n    /// @dev Batch add member allocation\\n    function addBatchAllocation(AllocationInput[] memory inputArr)\\n        external\\n        onlyOwner\\n    {\\n        require(inputArr.length < 10, \\\"EXCEED_BATCH_LIMIT\\\");\\n        for (uint256 i = 0; i < inputArr.length; i++) {\\n            addMemberAllocation(\\n                inputArr[i].memberAddr,\\n                inputArr[i].voteAmount,\\n                inputArr[i].rewardAmount\\n            );\\n        }\\n    }\\n\\n    /// @dev member claim their token allocation\\n    /// @param amount amount of token they want to claim\\n    function memberClaimToken(uint256 amount) external {\\n        require(amount > 0, \\\"NO_CLAIM_ZERO\\\");\\n        MemberInfo storage member = members[msg.sender];\\n        require(amount <= member.availableToken, \\\"EXCEED_CLAIM_LIMIT\\\");\\n        member.availableToken -= amount;\\n        _issueTo(msg.sender, amount);\\n        emit ClaimToken(msg.sender, amount);\\n    }\\n\\n    /// @dev member claim their token allocation\\n    /// @param amount amount of token they want to claim\\n    function withdrawUnClaim(uint256 amount) external onlyOwner {\\n        require(amount > 0, \\\"NO_WITHDRAW_UNCLAIM_ZERO\\\");\\n        uint256 totalParent = IERC20(branchInfo.parentTokenAddress).balanceOf(\\n            address(this)\\n        );\\n        require(amount <= totalParent - totalAllocation, \\\"EXCEED_CLAIM_LIMIT\\\");\\n        _parentTransfer(address(this), msg.sender, amount);\\n    }\\n\\n    /// @dev Initialize Branch Vote Token\\n    /// @param _name name of subtoken\\n    /// @param _symbol symbol of subtoken\\n    function _initToken(string memory _name, string memory _symbol) internal {\\n        require(managerState == ManagerState.NONE, \\\"NOT_IN_NONE_STATE\\\");\\n        SocotraVoteToken voteToken = new SocotraVoteToken(_name, _symbol);\\n        branchInfo.voteTokenAddress = address(voteToken);\\n    }\\n\\n    /// @dev Transfer Parent Token\\n    /// @param from from address\\n    /// @param target target address\\n    /// @param amount amount of token\\n    function _parentTransfer(\\n        address from,\\n        address target,\\n        uint256 amount\\n    ) internal {\\n        IERC20(branchInfo.parentTokenAddress).transferFrom(\\n            from,\\n            target,\\n            amount\\n        );\\n    }\\n\\n    /// @dev Transfer Branch Token\\n    /// @param from from address\\n    /// @param target target address\\n    /// @param amount amount of token\\n    function _voteTransfer(\\n        address from,\\n        address target,\\n        uint256 amount\\n    ) internal {\\n        IERC20(branchInfo.voteTokenAddress).transferFrom(from, target, amount);\\n    }\\n\\n    /// @dev Issue subtoken\\n    /// @param target name of subtoken\\n    /// @param amount symbol of subtoken\\n    function _issueTo(address target, uint256 amount) internal {\\n        SocotraVoteToken(branchInfo.voteTokenAddress)._managerMint(\\n            target,\\n            amount\\n        );\\n    }\\n\\n    /// @dev Burn subtoken\\n    /// @param target name of subtoken\\n    /// @param amount symbol of subtoken\\n    function _burnFrom(address target, uint256 amount) internal {\\n        SocotraVoteToken(branchInfo.voteTokenAddress)._managerBurn(\\n            target,\\n            amount\\n        );\\n    }\\n\\n    /// @dev Request payout for member\\n    /// @param amount amount of vote token\\n    /// @param receiver receiver address\\n    /// @param proof proof of task such as link to evidence\\n    function requestPayout(\\n        uint256 amount,\\n        address receiver,\\n        string memory proof\\n    ) external {\\n        require(amount > 0, \\\"NON_ZERO_AMOUNT\\\");\\n        MemberInfo storage member = members[msg.sender];\\n        require(\\n            amount + member.claimingToken <= member.totalToken,\\n            \\\"EXCEED_TOTAL\\\"\\n        );\\n        member.claimingToken += amount;\\n        _voteTransfer(msg.sender, address(this), amount);\\n        payouts[payoutCount] = Payout({\\n            amount: amount,\\n            issuer: msg.sender,\\n            receiver: receiver,\\n            proof: proof,\\n            isPaid: false\\n        });\\n        emit RequestPayout(payoutCount, amount, msg.sender, receiver, proof);\\n        payoutCount++;\\n    }\\n\\n    /// @dev Withdraw the payout\\n    /// @param payoutId id of requested payout\\n    function withdrawPayout(uint256 payoutId) external {\\n        MemberInfo storage member = members[msg.sender];\\n        Payout storage payout = payouts[payoutId];\\n        require(payout.isPaid == false, \\\"ALREADY_PAYOUT\\\");\\n        payout.isPaid = true;\\n        member.claimingToken -= payout.amount;\\n        _voteTransfer(address(this), payout.receiver, payout.amount);\\n        emit WithdrawPayout(payoutId);\\n    }\\n\\n    /// @dev Subdao owner confirm to send fund to member\\n    /// @param payoutId id of requested payout\\n    function issuePayout(uint256 payoutId) public onlyOwner {\\n        Payout storage payout = payouts[payoutId];\\n        require(payout.isPaid == false, \\\"ALREADY_PAYOUT\\\");\\n        _burnFrom(address(this), payout.amount);\\n        MemberInfo storage member = members[payout.issuer];\\n\\n        uint256 payoutAmount = calPayoutAmount(\\n            payout.amount,\\n            member.totalToken,\\n            member.rewardAmount\\n        );\\n        member.rewardAmount -= payoutAmount;\\n        member.claimingToken -= payout.amount;\\n        payout.isPaid = true;\\n        _parentTransfer(address(this), payout.receiver, payoutAmount);\\n        emit IssuePayout(payoutId);\\n    }\\n\\n    /// @dev Batch issue payout\\n    function batchIssuePayout(uint256[] memory payoutIds) public onlyOwner {\\n        require(payoutIds.length < 10, \\\"EXCEED_PAYOUT_LIMIT\\\");\\n        for (uint256 i = 0; i < payoutIds.length; i++) {\\n            issuePayout(payoutIds[i]);\\n        }\\n    }\\n\\n    function calPayoutAmount(\\n        uint256 claimAmount,\\n        uint256 totalMemberToken,\\n        uint256 totalMemberReward\\n    ) public pure returns (uint256) {\\n        return (claimAmount * totalMemberReward) / totalMemberToken;\\n    }\\n}\\n\",\"keccak256\":\"0xfd12b172f67a9e320cc00d48fc8e86e410fc8ce1c264cd9529dd6a52680146a9\",\"license\":\"ISC\"},\"contracts/SocotraFactory.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.11;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./SocotraBranchManager.sol\\\";\\nimport \\\"./VoteProxySigner.sol\\\";\\nimport \\\"./interfaces/ISocotraFactory.sol\\\";\\n\\ncontract SocotraFactory is ISocotraFactory {\\n    using Address for address;\\n    address public immutable socotraBranchManagerImplementation;\\n    address public immutable voteProxyImplementation;\\n\\n    uint256 branchIds;\\n    uint256 MIN_ISSUE_AMOUNT = 0;\\n\\n    mapping(uint256 => BranchDetail) branches;\\n\\n    constructor() {\\n        voteProxyImplementation = address(new VoteProxySigner());\\n        socotraBranchManagerImplementation = address(\\n            new SocotraBranchManager()\\n        );\\n    }\\n\\n    /// @dev create new branch for splint up subdao\\n    /// @param parentToken address of ERC20 token\\n    /// @param amount initial amount of parent token\\n    /// @param name name of subdao\\n    /// @param imageUrl link to url of subdao's image\\n    /// @param tokenName name of subdao token\\n    /// @param tokenSymbol symbol of subdao token\\n    function splitBranch(\\n        address parentToken,\\n        uint256 amount,\\n        string memory name,\\n        string memory imageUrl,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) public returns (address) {\\n        require(amount > MIN_ISSUE_AMOUNT, \\\"MUST_GREATER_THAN_MINIMUM\\\");\\n        SocotraBranchManager branch = SocotraBranchManager(\\n            Clones.clone(socotraBranchManagerImplementation)\\n        );\\n        branch.init(\\n            address(this),\\n            parentToken,\\n            msg.sender,\\n            name,\\n            imageUrl,\\n            tokenName,\\n            tokenSymbol\\n        );\\n\\n        branches[branchIds] = BranchDetail({\\n            branchAddr: address(branch),\\n            parentToken: parentToken,\\n            issuer: msg.sender\\n        });\\n        IERC20(parentToken).transferFrom(msg.sender, address(branch), amount);\\n        emit SplitBranch(\\n            address(branch),\\n            parentToken,\\n            amount,\\n            msg.sender,\\n            branchIds\\n        );\\n        branchIds++;\\n        return address(branch);\\n    }\\n\\n    function createVoteProxy(address issuer) public returns (address) {\\n        VoteProxySigner voter = VoteProxySigner(\\n            Clones.clone(voteProxyImplementation)\\n        );\\n        voter.init(msg.sender, issuer);\\n        emit CreateVoter(msg.sender, issuer, address(voter));\\n        return address(voter);\\n    }\\n}\\n\",\"keccak256\":\"0xb97a47f860356d74e579e2783130cf1dacab21ebe4e5381cfa2036ea1d02e5fd\",\"license\":\"ISC\"},\"contracts/SocotraVoteToken.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20VotesComp.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SocotraVoteToken is ERC20, ERC20Permit, ERC20VotesComp, Ownable {\\n    constructor(string memory _name, string memory _symbol)\\n        ERC20(_name, _symbol)\\n        ERC20Permit(_name)\\n    {}\\n\\n    // The functions below are overrides required by Solidity.\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20, ERC20Votes) {\\n        super._afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address to, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._mint(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n        internal\\n        override(ERC20, ERC20Votes)\\n    {\\n        super._burn(account, amount);\\n    }\\n\\n    /// @dev burn token by manager\\n    /// @param target target address\\n    /// @param amount amount to burn\\n    function _managerBurn(address target, uint256 amount) external onlyOwner {\\n        _burn(target, amount);\\n    }\\n\\n    /// @dev mint token by manager\\n    /// @param target target address\\n    /// @param amount amount to mint\\n    function _managerMint(address target, uint256 amount) external onlyOwner {\\n        _mint(target, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9d881dc5cfa8d2d0456e0e240ee40fbc676a821061b4ad4f5ac1c3bbebb2ba19\",\"license\":\"ISC\"},\"contracts/VoteProxySigner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/IGovernor.sol\\\";\\n\\ninterface Iauction {\\n    function isWinningSignature(bytes32 _hash, bytes memory _signature)\\n        external\\n        view\\n        returns (bool);\\n}\\n\\ncontract VoteProxySigner is Ownable, Iauction {\\n    enum VoterState {\\n        NONE,\\n        INITIALIZED\\n    }\\n\\n    VoterState voterState;\\n\\n    mapping(address => bool) public voter;\\n\\n    event UpdateVoter(address member, bool approval);\\n\\n    function init(address _owner, address _issuer) external {\\n        require(voterState == VoterState.NONE);\\n        _transferOwnership(_owner);\\n        voter[msg.sender] = true;\\n        voter[_issuer] = true;\\n        voterState = VoterState.INITIALIZED;\\n    }\\n\\n    function bravoCastVote(\\n        address governor,\\n        uint256 proposalId,\\n        uint8 support\\n    ) public {\\n        require(voter[msg.sender] = true);\\n        IGovernor(governor).castVote(proposalId, support);\\n    }\\n\\n    function modifyTeam(address _member, bool _approval) public onlyOwner {\\n        voter[_member] = _approval;\\n        emit UpdateVoter(_member, _approval);\\n    }\\n\\n    function isWinningSignature(bytes32 _hash, bytes memory _signature)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        address signer = recover(_hash, _signature);\\n        return voter[signer];\\n    }\\n\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\\n        external\\n        view\\n        returns (bytes4)\\n    {\\n        // Validate signatures\\n        if (isWinningSignature(_hash, _signature) == true) {\\n            return 0x1626ba7e;\\n        } else {\\n            return 0xffffffff;\\n        }\\n    }\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOwner returns (bool, bytes memory) {\\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\\n        return (success, result);\\n    }\\n\\n    /* Recovery Part */\\n\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address, RecoverError)\\n    {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(\\n                vs,\\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            )\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n}\\n\",\"keccak256\":\"0x3e03ea83d9f5c54434f468b316f0172cdd55ea1fb2f4c55732bbd53f5472750e\",\"license\":\"MIT\"},\"contracts/interfaces/IDelegateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IDelegateRegistry {\\n    // Using these events it is possible to process the events to build up reverse lookups.\\n    // The indeces allow it to be very partial about how to build this lookup (e.g. only for a specific delegate).\\n    event SetDelegate(\\n        address indexed delegator,\\n        bytes32 indexed id,\\n        address indexed delegate\\n    );\\n    event ClearDelegate(\\n        address indexed delegator,\\n        bytes32 indexed id,\\n        address indexed delegate\\n    );\\n\\n    /// @dev Sets a delegate for the msg.sender and a specific id.\\n    ///      The combination of msg.sender and the id can be seen as a unique key.\\n    /// @param id Id for which the delegate should be set\\n    /// @param delegate Address of the delegate\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    /// @dev Clears a delegate for the msg.sender and a specific id.\\n    ///      The combination of msg.sender and the id can be seen as a unique key.\\n    /// @param id Id for which the delegate should be set\\n    function clearDelegate(bytes32 id) external;\\n}\\n\",\"keccak256\":\"0xce2249c1a8c1b2c2d91ceaab1f68a6e4c047e4d3138b43c64f85cf5f7187ed1e\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISocotraFactory.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface ISocotraFactory {\\n    function createVoteProxy(address issuer) external returns (address);\\n\\n    struct BranchDetail {\\n        address branchAddr;\\n        address parentToken;\\n        address issuer;\\n    }\\n    event SplitBranch(\\n        address branchAddr,\\n        address parentToken,\\n        uint256 amount,\\n        address issuer,\\n        uint256 branchId\\n    );\\n\\n    event CreateVoter(address owner, address issuer, address voter);\\n}\\n\",\"keccak256\":\"0xb5c3e253cd6fb1672bc89007896cb04004c724055db32d2c5c069a0f784eddf1\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IVoteProxySigner.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IVoteProxySigner {\\n    function bravoCastVote(\\n        address governor,\\n        uint256 proposalId,\\n        uint8 support\\n    ) external;\\n\\n    function modifyTeam(address _member, bool _approval) external;\\n\\n    struct BranchDetail {\\n        address branchAddr;\\n        address parentToken;\\n        address issuer;\\n    }\\n    event SplitBranch(\\n        address branchAddr,\\n        address parentToken,\\n        uint256 amount,\\n        address issuer,\\n        uint256 branchId\\n    );\\n\\n    event CreateVoter(address owner, address issuer, address voter);\\n}\\n\",\"keccak256\":\"0x5e7e21747291a38b7d16dc8498d8b47d6f934de66ae748c1522fdcdbb04e7b80\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c0604052600060015534801561001557600080fd5b5060405161002290610085565b604051809103906000f08015801561003e573d6000803e3d6000fd5b506001600160a01b031660a05260405161005790610092565b604051809103906000f080158015610073573d6000803e3d6000fd5b506001600160a01b031660805261009f565b61119280610a2483390190565b61548b80611bb683390190565b60805160a0516109546100d060003960008181609201526103d401526000818160b9015261016701526109546000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806302235d1514610051578063681b16961461008d5780639b7a2afe146100b4578063b251b294146100db575b600080fd5b61006461005f3660046106c0565b6100ee565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6100646100e9366004610786565b6103cc565b60006001548611610160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d5553545f475245415445525f5448414e5f4d494e494d554d0000000000000060448201526064015b60405180910390fd5b600061018b7f00000000000000000000000000000000000000000000000000000000000000006104e0565b6040517f9c405e5f00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff821690639c405e5f906101ec9030908c9033908c908c908c908c90600401610813565b600060405180830381600087803b15801561020657600080fd5b505af115801561021a573d6000803e3d6000fd5b50506040805160608101825273ffffffffffffffffffffffffffffffffffffffff8581168083528d8216602080850182815233868801818152600080548152600294859052899020975188549088167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161789559251600189018054918916918516919091179055519690920180549690951695169490941790925592517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101929092526024820192909252604481018b90529092506323b872dd91506064016020604051808303816000875af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610344919061089c565b506000546040805173ffffffffffffffffffffffffffffffffffffffff84811682528b1660208201528082018a90523360608201526080810192909252517fe7ba7c736ee01b2bba2f5926d861c1813ceb0babfe0cd485768222ceb296e1d79181900360a00190a16000805490806103bb836108be565b909155509098975050505050505050565b6000806103f87f00000000000000000000000000000000000000000000000000000000000000006104e0565b6040517ff09a401600000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff85811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561046b57600080fd5b505af115801561047f573d6000803e3d6000fd5b50506040805133815273ffffffffffffffffffffffffffffffffffffffff878116602083015285168183015290517fccc4be75b69ada82154d60758cc34d9eddfb3e32ac796ee2c2b450e1f2cdd98e9350908190036060019150a192915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff81166105bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610157565b919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146105bd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261062657600080fd5b813567ffffffffffffffff80821115610641576106416105e6565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610687576106876105e6565b816040528381528660208588010111156106a057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156106d957600080fd5b6106e2876105c2565b955060208701359450604087013567ffffffffffffffff8082111561070657600080fd5b6107128a838b01610615565b9550606089013591508082111561072857600080fd5b6107348a838b01610615565b9450608089013591508082111561074a57600080fd5b6107568a838b01610615565b935060a089013591508082111561076c57600080fd5b5061077989828a01610615565b9150509295509295509295565b60006020828403121561079857600080fd5b6107a1826105c2565b9392505050565b6000815180845260005b818110156107ce576020818501810151868301820152016107b2565b818111156107e0576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525060e0606083015261085460e08301876107a8565b828103608084015261086681876107a8565b905082810360a084015261087a81866107a8565b905082810360c084015261088e81856107a8565b9a9950505050505050505050565b6000602082840312156108ae57600080fd5b815180151581146107a157600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610917577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212204f9b570bed02995ac0dd74da84369cd826481205974878f0138e493b5d36083664736f6c634300080b0033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6111148061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063ac0679a611610076578063b61d27f61161005b578063b61d27f6146101aa578063f09a4016146101cb578063f2fde38b146101de57600080fd5b8063ac0679a614610174578063af0dbe541461018757600080fd5b8063715018a6116100a7578063715018a61461012f5780638da5cb5b14610139578063a222b1051461016157600080fd5b80631626ba7e146100c35780635d3a89991461010c575b600080fd5b6100d66100d1366004610d62565b6101f1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b61011f61011a366004610ddd565b61028e565b6040519015158152602001610103565b6101376102cb565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61013761016f366004610edf565b61035d565b610137610182366004610f25565b610438565b61011f610195366004610f61565b60016020526000908152604090205460ff1681565b6101bd6101b8366004610f7c565b610547565b604051610103929190610fd6565b6101376101d9366004611053565b61064b565b6101376101ec366004610f61565b610731565b60006102338484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061028e92505050565b15156001141561026457507f1626ba7e00000000000000000000000000000000000000000000000000000000610287565b507fffffffff000000000000000000000000000000000000000000000000000000005b9392505050565b60008061029b8484610861565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff16949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61035b6000610885565b565b33600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790556040517f567813880000000000000000000000000000000000000000000000000000000081526004810183905260ff8216602482015273ffffffffffffffffffffffffffffffffffffffff8416906356781388906044016020604051808303816000875af115801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190611086565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610348565b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fb43d5232746338e9c1144f9527dfc24742e0c8ff638df3bb5d21cefbb83480f2910160405180910390a15050565b6000805460609073ffffffffffffffffffffffffffffffffffffffff1633146105cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610348565b6000808773ffffffffffffffffffffffffffffffffffffffff168787876040516105f792919061109f565b60006040518083038185875af1925050503d8060008114610634576040519150601f19603f3d011682016040523d82523d6000602084013e610639565b606091505b50909450925050505b94509492505050565b6000805474010000000000000000000000000000000000000000900460ff16600181111561067b5761067b6110af565b1461068557600080fd5b61068e82610885565b33600090815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00908116841790915573ffffffffffffffffffffffffffffffffffffffff949094168352822080549093161790915580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017905550565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610348565b73ffffffffffffffffffffffffffffffffffffffff8116610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610348565b61085e81610885565b50565b600080600061087085856108fa565b9150915061087d8161096a565b509392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808251604114156109315760208301516040840151606085015160001a61092587828585610bc3565b94509450505050610963565b82516040141561095b5760208301516040840151610950868383610cd8565b935093505050610963565b506000905060025b9250929050565b600081600481111561097e5761097e6110af565b14156109875750565b600181600481111561099b5761099b6110af565b1415610a03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610348565b6002816004811115610a1757610a176110af565b1415610a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610348565b6003816004811115610a9357610a936110af565b1415610b21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610348565b6004816004811115610b3557610b356110af565b141561085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610348565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610bfa5750600090506003610642565b8460ff16601b14158015610c1257508460ff16601c14155b15610c235750600090506004610642565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610c77573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610ccb57600060019250925050610642565b9660009650945050505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b01610d1287828885610bc3565b935093505050935093915050565b60008083601f840112610d3257600080fd5b50813567ffffffffffffffff811115610d4a57600080fd5b60208301915083602082850101111561096357600080fd5b600080600060408486031215610d7757600080fd5b83359250602084013567ffffffffffffffff811115610d9557600080fd5b610da186828701610d20565b9497909650939450505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215610df057600080fd5b82359150602083013567ffffffffffffffff80821115610e0f57600080fd5b818501915085601f830112610e2357600080fd5b813581811115610e3557610e35610dae565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610e7b57610e7b610dae565b81604052828152886020848701011115610e9457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eda57600080fd5b919050565b600080600060608486031215610ef457600080fd5b610efd84610eb6565b925060208401359150604084013560ff81168114610f1a57600080fd5b809150509250925092565b60008060408385031215610f3857600080fd5b610f4183610eb6565b915060208301358015158114610f5657600080fd5b809150509250929050565b600060208284031215610f7357600080fd5b61028782610eb6565b60008060008060608587031215610f9257600080fd5b610f9b85610eb6565b935060208501359250604085013567ffffffffffffffff811115610fbe57600080fd5b610fca87828801610d20565b95989497509550505050565b821515815260006020604081840152835180604085015260005b8181101561100c57858101830151858201606001528201610ff0565b8181111561101e576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b6000806040838503121561106657600080fd5b61106f83610eb6565b915061107d60208401610eb6565b90509250929050565b60006020828403121561109857600080fd5b5051919050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220e1f95d2cdd118ab98c4b44a08112b5d9923b8ed2a6d574213f3735ba83a485e364736f6c634300080b00336080604052600680546001600160a01b03191673469788fe6e9e9681c6ebf3bf78e7fd26fc01544617905534801561003657600080fd5b5061004033610045565b610095565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6153e680620000a56000396000f3fe60806040523480156200001157600080fd5b5060043610620001955760003560e01c80639c405e5f11620000e9578063c45a01551162000097578063d8aea930116200006e578063d8aea9301462000363578063f2fde38b146200037a578063f460590b146200039157600080fd5b8063c45a01551462000321578063c6ac39f01462000342578063c6c363d1146200034c57600080fd5b8063b183136b11620000cc578063b183136b14620002dc578063b21c793514620002f3578063b9ce7d3b146200030a57600080fd5b80639c405e5f14620002ae5780639f13e2c014620002c557600080fd5b8063739249351162000147578063858088f4116200012a578063858088f4146200024057806386728d2c14620002575780638da5cb5b146200026e57600080fd5b806373924935146200021057806379203dc4146200022757600080fd5b80632cb7ce38116200017c5780632cb7ce3814620001ca57806346020da414620001ef578063715018a6146200020657600080fd5b8063160fb908146200019a578063190daa0e14620001b3575b600080fd5b620001b1620001ab3660046200219a565b620003a8565b005b620001b1620001c43660046200232b565b6200056a565b620001d4620007a6565b604051620001e69493929190620023f8565b60405180910390f35b620001b16200020036600462002479565b620008f9565b620001b162000a02565b620001b1620002213660046200250e565b62000a79565b6200023160085481565b604051908152602001620001e6565b620001b162000251366004620025e3565b62000bc4565b620001b1620002683660046200261b565b62000e6b565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001620001e6565b620001b1620002bf36600462002642565b62000f48565b620001b1620002d63660046200219a565b620010ab565b620001b1620002ed3660046200219a565b620011c4565b620001b1620003043660046200219a565b62001385565b620002316200031b36600462002734565b620014a8565b600154620002889073ffffffffffffffffffffffffffffffffffffffff1681565b620001b1620014cb565b620001b16200035d3660046200219a565b6200173d565b620001b16200037436600462002761565b62001929565b620001b16200038b3660046200261b565b62001b09565b620001b1620003a2366004620027c1565b62001c0b565b60005473ffffffffffffffffffffffffffffffffffffffff163314620004155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60015460029074010000000000000000000000000000000000000000900460ff1660038111156200044a576200044a620027ff565b60ff1610156200049d5760405162461bcd60e51b815260206004820152601560248201527f4e4f545f494e495449414c495a45445f564f544552000000000000000000000060448201526064016200040c565b6006546007546040517fbd86e5080000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff918216602482015291169063bd86e50890604401600060405180830381600087803b1580156200051457600080fd5b505af115801562000529573d6000803e3d6000fd5b505050507f83eb99add5f9cf2d3a35ecd541b0f5289e3909bfef983d2c29feb719e4cdc0c0816040516200055f91815260200190565b60405180910390a150565b60008311620005bc5760405162461bcd60e51b815260206004820152600f60248201527f4e4f4e5f5a45524f5f414d4f554e54000000000000000000000000000000000060448201526064016200040c565b33600090815260096020526040902060018101546002820154620005e190866200285d565b1115620006315760405162461bcd60e51b815260206004820152600c60248201527f4558434545445f544f54414c000000000000000000000000000000000000000060448201526064016200040c565b838160020160008282546200064791906200285d565b909155506200065a905033308662001d90565b6040805160a08101825285815233602080830191825273ffffffffffffffffffffffffffffffffffffffff87811684860190815260608501888152600060808701819052600b548152600a8552969096208551815593516001850180549184167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055905160028501805491909316911617905592518051929391926200070c9260038501920190620020e6565b5060809190910151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600b546040517f90bf6bef73f4bfda63a2761f6a40850999d5b4ba2aeb455830dd1505b772d9ee916200078191879033908890889062002878565b60405180910390a1600b80549060006200079b83620028bf565b919050555050505050565b600280546003546004805473ffffffffffffffffffffffffffffffffffffffff938416949290931692620007da90620028fb565b80601f01602080910402602001604051908101604052809291908181526020018280546200080890620028fb565b8015620008595780601f106200082d5761010080835404028352916020019162000859565b820191906000526020600020905b8154815290600101906020018083116200083b57829003601f168201915b5050505050908060030180546200087090620028fb565b80601f01602080910402602001604051908101604052809291908181526020018280546200089e90620028fb565b8015620008ef5780601f10620008c357610100808354040283529160200191620008ef565b820191906000526020600020905b815481529060010190602001808311620008d157829003601f168201915b5050505050905084565b60005473ffffffffffffffffffffffffffffffffffffffff163314620009625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b600a815110620009b55760405162461bcd60e51b815260206004820152601360248201527f4558434545445f5041594f55545f4c494d49540000000000000000000000000060448201526064016200040c565b60005b8151811015620009fe57620009e9828281518110620009db57620009db62002951565b60200260200101516200173d565b80620009f581620028bf565b915050620009b8565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000a6b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b62000a77600062001e3f565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000ae25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b600a81511062000b355760405162461bcd60e51b815260206004820152601260248201527f4558434545445f42415443485f4c494d4954000000000000000000000000000060448201526064016200040c565b60005b8151811015620009fe5762000baf82828151811062000b5b5762000b5b62002951565b60200260200101516000015183838151811062000b7c5762000b7c62002951565b60200260200101516020015184848151811062000b9d5762000b9d62002951565b60200260200101516040015162000bc4565b8062000bbb81620028bf565b91505062000b38565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000c2d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b6000821162000c7f5760405162461bcd60e51b815260206004820152600f60248201527f4e4f4e5f5a45524f5f414d4f554e54000000000000000000000000000000000060448201526064016200040c565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801562000cef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d15919062002980565b9050808260085462000d2891906200285d565b111562000d785760405162461bcd60e51b815260206004820152601660248201527f4e4f545f4558434545445f544f4b454e5f4c494d49540000000000000000000060448201526064016200040c565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260096020526040812080549091859183919062000db39084906200285d565b925050819055508381600101600082825462000dd091906200285d565b925050819055508281600301600082825462000ded91906200285d565b92505081905550826008600082825462000e0891906200285d565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff87168152602081018690529081018490527f6f4433b6719ac1e60f01e486a2560c84d86c88f9efdb85986fa4a5b38fd7c6f29060600160405180910390a15050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000ed45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f54413e4029c4b34d3b2d59e86cbd4e4c704bd444e9fb1ade66859555d9195775906020016200055f565b600060015474010000000000000000000000000000000000000000900460ff16600381111562000f7c5762000f7c620027ff565b1462000fcb5760405162461bcd60e51b815260206004820152601460248201527f416c726561647920696e697469616c697a65642100000000000000000000000060448201526064016200040c565b6001805473ffffffffffffffffffffffffffffffffffffffff808a167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556002805492891692909116919091179055835162001035906004906020870190620020e6565b5082516200104b906005906020860190620020e6565b50620010578562001e3f565b62001063828262001eb4565b5050600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555050505050565b60008111620010fd5760405162461bcd60e51b815260206004820152600d60248201527f4e4f5f434c41494d5f5a45524f0000000000000000000000000000000000000060448201526064016200040c565b33600090815260096020526040902080548211156200115f5760405162461bcd60e51b815260206004820152601260248201527f4558434545445f434c41494d5f4c494d4954000000000000000000000000000060448201526064016200040c565b818160000160008282546200117591906200299a565b90915550620011879050338362001fbe565b60408051338152602081018490527f5d425a3a6a3d5a60fbf147dc6659ce3dfeb701fc44fe90058c32783b8807c574910160405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200122d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b600081116200127f5760405162461bcd60e51b815260206004820152601860248201527f4e4f5f57495448445241575f554e434c41494d5f5a45524f000000000000000060448201526064016200040c565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015620012ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001315919062002980565b9050600854816200132791906200299a565b821115620013785760405162461bcd60e51b815260206004820152601260248201527f4558434545445f434c41494d5f4c494d4954000000000000000000000000000060448201526064016200040c565b620009fe3033846200201e565b336000908152600960209081526040808320848452600a909252909120600481015460ff1615620013f95760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f5041594f555400000000000000000000000000000000000060448201526064016200040c565b6004810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580546002830180546000906200143e9084906200299a565b9091555050600281015481546200147091309173ffffffffffffffffffffffffffffffffffffffff9091169062001d90565b6040518381527fb3f882fcf2ac91c3f9a7d0b53d22e3893f3992dcffbf4b1ac49a07706eb225dc9060200160405180910390a1505050565b600082620014b78386620029b4565b620014c39190620029f4565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314620015345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b6001805474010000000000000000000000000000000000000000900460ff166003811115620015675762001567620027ff565b14620015b65760405162461bcd60e51b815260206004820152601160248201527f4e4f545f50454e44494e475f535441544500000000000000000000000000000060448201526064016200040c565b60015473ffffffffffffffffffffffffffffffffffffffff1663b251b294620015f460005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016020604051808303816000875af115801562001660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001686919062002a30565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169182179055600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017905560408051918252517f63a40fb1ca0677d69a93f19d3e96304954abf2c58888d1a1f940d91d5a550a909181900360200190a1565b60005473ffffffffffffffffffffffffffffffffffffffff163314620017a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b6000818152600a60205260409020600481015460ff16156200180b5760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f5041594f555400000000000000000000000000000000000060448201526064016200040c565b6200181b30826000015462002086565b60018082015473ffffffffffffffffffffffffffffffffffffffff166000908152600960205260408120835492810154600382015491936200186092909190620014a8565b9050808260030160008282546200187891906200299a565b90915550508254600283018054600090620018959084906200299a565b90915550506004830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556002830154620018f090309073ffffffffffffffffffffffffffffffffffffffff16836200201e565b6040518481527fcea6422162818bdbb05ae884f2244db6752cc8adaae0c48f1197993032cc2a9d9060200160405180910390a150505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314620019925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b600260015474010000000000000000000000000000000000000000900460ff166003811115620019c657620019c6620027ff565b1462001a155760405162461bcd60e51b815260206004820152601560248201527f4e4f545f494e495449414c495a45445f5354415445000000000000000000000060448201526064016200040c565b6002546007546040517fc3cda52000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018890526044810187905260ff861660648201526084810185905260a4810184905291169063c3cda5209060c401600060405180830381600087803b15801562001aaa57600080fd5b505af115801562001abf573d6000803e3d6000fd5b5050600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167403000000000000000000000000000000000000000017905550505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331462001b725760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b73ffffffffffffffffffffffffffffffffffffffff811662001bfd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200040c565b62001c088162001e3f565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331462001c745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200040c565b60015460029074010000000000000000000000000000000000000000900460ff16600381111562001ca95762001ca9620027ff565b60ff16101562001cfc5760405162461bcd60e51b815260206004820152601560248201527f4e4f545f494e495449414c495a45445f564f544552000000000000000000000060448201526064016200040c565b6007546040517fac0679a600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283151560248301529091169063ac0679a6906044015b600060405180830381600087803b15801562001d7357600080fd5b505af115801562001d88573d6000803e3d6000fd5b505050505050565b6003546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152848116602483015260448201849052909116906323b872dd906064015b6020604051808303816000875af115801562001e13573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e39919062002a50565b50505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060015474010000000000000000000000000000000000000000900460ff16600381111562001ee85762001ee8620027ff565b1462001f375760405162461bcd60e51b815260206004820152601160248201527f4e4f545f494e5f4e4f4e455f535441544500000000000000000000000000000060448201526064016200040c565b6000828260405162001f499062002175565b62001f5692919062002a70565b604051809103906000f08015801562001f73573d6000803e3d6000fd5b50600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055505050565b6003546040517f575dbebe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490529091169063575dbebe9060440162001d58565b6002546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152848116602483015260448201849052909116906323b872dd9060640162001df3565b6003546040517f63fb8cf900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906363fb8cf99060440162001d58565b828054620020f490620028fb565b90600052602060002090601f01602090048101928262002118576000855562002163565b82601f106200213357805160ff191683800117855562002163565b8280016001018555821562002163579182015b828111156200216357825182559160200191906001019062002146565b506200217192915062002183565b5090565b61290e8062002aa383390190565b5b8082111562002171576000815560010162002184565b600060208284031215620021ad57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811462001c0857600080fd5b8035620021e481620021b4565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156200223e576200223e620021e9565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156200228e576200228e620021e9565b604052919050565b600082601f830112620022a857600080fd5b813567ffffffffffffffff811115620022c557620022c5620021e9565b620022f860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162002244565b8181528460208386010111156200230e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156200234157600080fd5b8335925060208401356200235581620021b4565b9150604084013567ffffffffffffffff8111156200237257600080fd5b620023808682870162002296565b9150509250925092565b6000815180845260005b81811015620023b25760208185018101518683018201520162002394565b81811115620023c5576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250608060408301526200243360808301856200238a565b82810360608401526200244781856200238a565b979650505050505050565b600067ffffffffffffffff8211156200246f576200246f620021e9565b5060051b60200190565b600060208083850312156200248d57600080fd5b823567ffffffffffffffff811115620024a557600080fd5b8301601f81018513620024b757600080fd5b8035620024ce620024c88262002452565b62002244565b81815260059190911b82018301908381019087831115620024ee57600080fd5b928401925b828410156200244757833582529284019290840190620024f3565b600060208083850312156200252257600080fd5b823567ffffffffffffffff8111156200253a57600080fd5b8301601f810185136200254c57600080fd5b80356200255d620024c88262002452565b818152606091820283018401918482019190888411156200257d57600080fd5b938501935b83851015620025d75780858a0312156200259c5760008081fd5b620025a662002218565b8535620025b381620021b4565b81528587013587820152604080870135908201528352938401939185019162002582565b50979650505050505050565b600080600060608486031215620025f957600080fd5b83356200260681620021b4565b95602085013595506040909401359392505050565b6000602082840312156200262e57600080fd5b81356200263b81620021b4565b9392505050565b600080600080600080600060e0888a0312156200265e57600080fd5b6200266988620021d7565b96506200267960208901620021d7565b95506200268960408901620021d7565b9450606088013567ffffffffffffffff80821115620026a757600080fd5b620026b58b838c0162002296565b955060808a0135915080821115620026cc57600080fd5b620026da8b838c0162002296565b945060a08a0135915080821115620026f157600080fd5b620026ff8b838c0162002296565b935060c08a01359150808211156200271657600080fd5b50620027258a828b0162002296565b91505092959891949750929550565b6000806000606084860312156200274a57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a086880312156200277a57600080fd5b8535945060208601359350604086013560ff811681146200279a57600080fd5b94979396509394606081013594506080013592915050565b801515811462001c0857600080fd5b60008060408385031215620027d557600080fd5b8235620027e281620021b4565b91506020830135620027f481620027b2565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156200287357620028736200282e565b500190565b858152846020820152600073ffffffffffffffffffffffffffffffffffffffff808616604084015280851660608401525060a060808301526200244760a08301846200238a565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620028f457620028f46200282e565b5060010190565b600181811c908216806200291057607f821691505b602082108114156200294b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156200299357600080fd5b5051919050565b600082821015620029af57620029af6200282e565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620029ef57620029ef6200282e565b500290565b60008262002a2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121562002a4357600080fd5b81516200263b81620021b4565b60006020828403121562002a6357600080fd5b81516200263b81620027b2565b60408152600062002a8560408301856200238a565b828103602084015262002a9981856200238a565b9594505050505056fe6101406040523480156200001257600080fd5b506040516200290e3803806200290e8339810160408190526200003591620002ed565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200006b9291906200017a565b508051620000819060049060208401906200017a565b5050825160209384012082519284019290922060e08390526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919096012090529290925261012052506200012090503362000128565b505062000394565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001889062000357565b90600052602060002090601f016020900481019282620001ac5760008555620001f7565b82601f10620001c757805160ff1916838001178555620001f7565b82800160010185558215620001f7579182015b82811115620001f7578251825591602001919060010190620001da565b506200020592915062000209565b5090565b5b808211156200020557600081556001016200020a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200024857600080fd5b81516001600160401b038082111562000265576200026562000220565b604051601f8301601f19908116603f0116810190828211818310171562000290576200029062000220565b81604052838152602092508683858801011115620002ad57600080fd5b600091505b83821015620002d15785820183015181830184015290820190620002b2565b83821115620002e35760008385830101525b9695505050505050565b600080604083850312156200030157600080fd5b82516001600160401b03808211156200031957600080fd5b620003278683870162000236565b935060208501519150808211156200033e57600080fd5b506200034d8582860162000236565b9150509250929050565b600181811c908216806200036c57607f821691505b602082108114156200038e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161252a620003e460003960006112a5015260006112f4015260006112cf01526000611228015260006112520152600061127c015261252a6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063a457c2d7116100a2578063d505accf11610071578063d505accf1461041d578063dd62ed3e14610430578063f1127ed814610469578063f2fde38b146104bb57600080fd5b8063a457c2d7146103d1578063a9059cbb146103e4578063b4b5ea57146103f7578063c3cda5201461040a57600080fd5b80638da5cb5b116100de5780638da5cb5b146103925780638e539e8c146103a357806395d89b41146103b65780639ab24eb0146103be57600080fd5b8063715018a614610347578063782d6fe11461034f5780637ecebe001461037f57600080fd5b80633a46b1a8116101715780635c19a95c1161014b5780635c19a95c146102d057806363fb8cf9146102e35780636fcfff45146102f657806370a082311461031e57600080fd5b80633a46b1a814610264578063575dbebe14610277578063587cde1e1461028c57600080fd5b806323b872dd116101ad57806323b872dd14610227578063313ce5671461023a5780633644e51514610249578063395093511461025157600080fd5b806306fdde03146101d4578063095ea7b3146101f257806318160ddd14610215575b600080fd5b6101dc6104ce565b6040516101e99190612140565b60405180910390f35b6102056102003660046121cf565b610560565b60405190151581526020016101e9565b6002545b6040519081526020016101e9565b6102056102353660046121f9565b610578565b604051601281526020016101e9565b61021961059c565b61020561025f3660046121cf565b6105ab565b6102196102723660046121cf565b6105ea565b61028a6102853660046121cf565b610669565b005b6102b861029a366004612235565b6001600160a01b039081166000908152600760205260409020541690565b6040516001600160a01b0390911681526020016101e9565b61028a6102de366004612235565b6106d1565b61028a6102f13660046121cf565b6106de565b610309610304366004612235565b610742565b60405163ffffffff90911681526020016101e9565b61021961032c366004612235565b6001600160a01b031660009081526020819052604090205490565b61028a61076a565b61036261035d3660046121cf565b6107d0565b6040516bffffffffffffffffffffffff90911681526020016101e9565b61021961038d366004612235565b6107e4565b600a546001600160a01b03166102b8565b6102196103b1366004612250565b610802565b6101dc61085e565b6102196103cc366004612235565b61086d565b6102056103df3660046121cf565b61091e565b6102056103f23660046121cf565b6109c8565b610362610405366004612235565b6109d6565b61028a61041836600461227a565b6109e4565b61028a61042b3660046122d2565b610b1a565b61021961043e36600461233c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61047c61047736600461236f565b610c7e565b60408051825163ffffffff1681526020928301517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1692810192909252016101e9565b61028a6104c9366004612235565b610d17565b6060600380546104dd906123af565b80601f0160208091040260200160405190810160405280929190818152602001828054610509906123af565b80156105565780601f1061052b57610100808354040283529160200191610556565b820191906000526020600020905b81548152906001019060200180831161053957829003601f168201915b5050505050905090565b60003361056e818585610df6565b5060019392505050565b600033610586858285610f4e565b610591858585610ffe565b506001949350505050565b60006105a661121b565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061056e90829086906105e590879061242c565b610df6565b60004382106106405760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e65640060448201526064015b60405180910390fd5b6001600160a01b03831660009081526008602052604090206106629083611342565b9392505050565b600a546001600160a01b031633146106c35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b6106cd8282611429565b5050565b6106db3382611433565b50565b600a546001600160a01b031633146107385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b6106cd82826114c4565b6001600160a01b038116600090815260086020526040812054610764906114ce565b92915050565b600a546001600160a01b031633146107c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b6107ce600061154e565b565b60006106626107df84846105ea565b6115b8565b6001600160a01b038116600090815260056020526040812054610764565b60004382106108535760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610637565b610764600983611342565b6060600480546104dd906123af565b6001600160a01b03811660009081526008602052604081205480156108f6576001600160a01b03831660009081526008602052604090206108af600183612444565b815481106108bf576108bf61245b565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166108f9565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156109bb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610637565b6105918286868403610df6565b60003361056e818585610ffe565b60006107646107df8361086d565b83421115610a345760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610637565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610aae90610aa69060a0016040516020818303038152906040528051906020012061163c565b8585856116a5565b9050610ab9816116cd565b8614610b075760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610637565b610b118188611433565b50505050505050565b83421115610b6a5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610637565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b998c6116cd565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610bf48261163c565b90506000610c04828787876116a5565b9050896001600160a01b0316816001600160a01b031614610c675760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610637565b610c728a8a8a610df6565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600860205260409020805463ffffffff8416908110610cc257610cc261245b565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16918101919091529392505050565b600a546001600160a01b03163314610d715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610637565b6001600160a01b038116610ded5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610637565b6106db8161154e565b6001600160a01b038316610e715760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610637565b6001600160a01b038216610eed5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610637565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ff85781811015610feb5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610637565b610ff88484848403610df6565b50505050565b6001600160a01b03831661107a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610637565b6001600160a01b0382166110f65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610637565b6001600160a01b038316600090815260208190526040902054818110156111855760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610637565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906111bc90849061242c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161120891815260200190565b60405180910390a3610ff88484846116fa565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561127457507f000000000000000000000000000000000000000000000000000000000000000046145b1561129e57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b8154600090815b818110156113a657600061135d8284611705565b9050848682815481106113725761137261245b565b60009182526020909120015463ffffffff161115611392578092506113a0565b61139d81600161242c565b91505b50611349565b81156113ff57846113b8600184612444565b815481106113c8576113c861245b565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611402565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1695945050505050565b6106cd8282611720565b6001600160a01b038281166000818152600760208181526040808420805485845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610ff88284836117bc565b6106cd82826118f9565b600063ffffffff82111561154a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610637565b5090565b600a80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006bffffffffffffffffffffffff82111561154a5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201527f36206269747300000000000000000000000000000000000000000000000000006064820152608401610637565b600061076461164961121b565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006116b687878787611911565b915091506116c381611a1c565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b505050565b6116f5838383611c0d565b6000611714600284841861248a565b6106629084841661242c565b61172a8282611c3f565b6002546bffffffffffffffffffffffff10156117ae5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f746573000000000000000000000000000000006064820152608401610637565b610ff86009611d2683611d32565b816001600160a01b0316836001600160a01b0316141580156117de5750600081115b156116f5576001600160a01b0383161561186c576001600160a01b0383166000908152600860205260408120819061181990611f1485611d32565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611861929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156116f5576001600160a01b038216600090815260086020526040812081906118a290611d2685611d32565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516118ea929190918252602082015260400190565b60405180910390a25050505050565b6119038282611f20565b610ff86009611f1483611d32565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156119485750600090506003611a13565b8460ff16601b1415801561196057508460ff16601c14155b156119715750600090506004611a13565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156119c5573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116611a0c57600060019250925050611a13565b9150600090505b94509492505050565b6000816004811115611a3057611a306124c5565b1415611a395750565b6001816004811115611a4d57611a4d6124c5565b1415611a9b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610637565b6002816004811115611aaf57611aaf6124c5565b1415611afd5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610637565b6003816004811115611b1157611b116124c5565b1415611b855760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610637565b6004816004811115611b9957611b996124c5565b14156106db5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610637565b6001600160a01b038381166000908152600760205260408082205485841683529120546116f5929182169116836117bc565b6001600160a01b038216611c955760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610637565b8060026000828254611ca7919061242c565b90915550506001600160a01b03821660009081526020819052604081208054839290611cd490849061242c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36106cd600083836116fa565b6000610662828461242c565b825460009081908015611d925785611d4b600183612444565b81548110611d5b57611d5b61245b565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611d95565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169250611dc383858763ffffffff16565b9150600081118015611e0157504386611ddd600184612444565b81548110611ded57611ded61245b565b60009182526020909120015463ffffffff16145b15611e8b57611e0f826120ac565b86611e1b600184612444565b81548110611e2b57611e2b61245b565b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550611f0b565b856040518060400160405280611ea0436114ce565b63ffffffff168152602001611eb4856120ac565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b60006106628284612444565b6001600160a01b038216611f9c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610637565b6001600160a01b0382166000908152602081905260409020548181101561202b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610637565b6001600160a01b038316600090815260208190526040812083830390556002805484929061205a908490612444565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36116f5836000846116fa565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82111561154a5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610637565b600060208083528351808285015260005b8181101561216d57858101830151858201604001528201612151565b8181111561217f576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b80356001600160a01b03811681146121ca57600080fd5b919050565b600080604083850312156121e257600080fd5b6121eb836121b3565b946020939093013593505050565b60008060006060848603121561220e57600080fd5b612217846121b3565b9250612225602085016121b3565b9150604084013590509250925092565b60006020828403121561224757600080fd5b610662826121b3565b60006020828403121561226257600080fd5b5035919050565b803560ff811681146121ca57600080fd5b60008060008060008060c0878903121561229357600080fd5b61229c876121b3565b955060208701359450604087013593506122b860608801612269565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a0312156122ed57600080fd5b6122f6886121b3565b9650612304602089016121b3565b9550604088013594506060880135935061232060808901612269565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561234f57600080fd5b612358836121b3565b9150612366602084016121b3565b90509250929050565b6000806040838503121561238257600080fd5b61238b836121b3565b9150602083013563ffffffff811681146123a457600080fd5b809150509250929050565b600181811c908216806123c357607f821691505b602082108114156116ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561243f5761243f6123fd565b500190565b600082821015612456576124566123fd565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000826124c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220ac12252ff0cb2a50fd83e3832a8cdf86187413be9b222bc4bea648004107928d64736f6c634300080b0033a2646970667358221220c2b24ada55c3ca8e4d8d9e34904e6c75a7518add6093a028b60bd499f59333b864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806302235d1514610051578063681b16961461008d5780639b7a2afe146100b4578063b251b294146100db575b600080fd5b61006461005f3660046106c0565b6100ee565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6100647f000000000000000000000000000000000000000000000000000000000000000081565b6100646100e9366004610786565b6103cc565b60006001548611610160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d5553545f475245415445525f5448414e5f4d494e494d554d0000000000000060448201526064015b60405180910390fd5b600061018b7f00000000000000000000000000000000000000000000000000000000000000006104e0565b6040517f9c405e5f00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff821690639c405e5f906101ec9030908c9033908c908c908c908c90600401610813565b600060405180830381600087803b15801561020657600080fd5b505af115801561021a573d6000803e3d6000fd5b50506040805160608101825273ffffffffffffffffffffffffffffffffffffffff8581168083528d8216602080850182815233868801818152600080548152600294859052899020975188549088167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161789559251600189018054918916918516919091179055519690920180549690951695169490941790925592517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101929092526024820192909252604481018b90529092506323b872dd91506064016020604051808303816000875af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610344919061089c565b506000546040805173ffffffffffffffffffffffffffffffffffffffff84811682528b1660208201528082018a90523360608201526080810192909252517fe7ba7c736ee01b2bba2f5926d861c1813ceb0babfe0cd485768222ceb296e1d79181900360a00190a16000805490806103bb836108be565b909155509098975050505050505050565b6000806103f87f00000000000000000000000000000000000000000000000000000000000000006104e0565b6040517ff09a401600000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff85811660248301529192509082169063f09a401690604401600060405180830381600087803b15801561046b57600080fd5b505af115801561047f573d6000803e3d6000fd5b50506040805133815273ffffffffffffffffffffffffffffffffffffffff878116602083015285168183015290517fccc4be75b69ada82154d60758cc34d9eddfb3e32ac796ee2c2b450e1f2cdd98e9350908190036060019150a192915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff81166105bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401610157565b919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146105bd57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261062657600080fd5b813567ffffffffffffffff80821115610641576106416105e6565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610687576106876105e6565b816040528381528660208588010111156106a057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156106d957600080fd5b6106e2876105c2565b955060208701359450604087013567ffffffffffffffff8082111561070657600080fd5b6107128a838b01610615565b9550606089013591508082111561072857600080fd5b6107348a838b01610615565b9450608089013591508082111561074a57600080fd5b6107568a838b01610615565b935060a089013591508082111561076c57600080fd5b5061077989828a01610615565b9150509295509295509295565b60006020828403121561079857600080fd5b6107a1826105c2565b9392505050565b6000815180845260005b818110156107ce576020818501810151868301820152016107b2565b818111156107e0576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525060e0606083015261085460e08301876107a8565b828103608084015261086681876107a8565b905082810360a084015261087a81866107a8565b905082810360c084015261088e81856107a8565b9a9950505050505050505050565b6000602082840312156108ae57600080fd5b815180151581146107a157600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610917577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212204f9b570bed02995ac0dd74da84369cd826481205974878f0138e493b5d36083664736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "splitBranch(address,uint256,string,string,string,string)": {
        "details": "create new branch for splint up subdao",
        "params": {
          "amount": "initial amount of parent token",
          "imageUrl": "link to url of subdao's image",
          "name": "name of subdao",
          "parentToken": "address of ERC20 token",
          "tokenName": "name of subdao token",
          "tokenSymbol": "symbol of subdao token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4814,
        "contract": "contracts/SocotraFactory.sol:SocotraFactory",
        "label": "branchIds",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4817,
        "contract": "contracts/SocotraFactory.sol:SocotraFactory",
        "label": "MIN_ISSUE_AMOUNT",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4822,
        "contract": "contracts/SocotraFactory.sol:SocotraFactory",
        "label": "branches",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(BranchDetail)5676_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(BranchDetail)5676_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ISocotraFactory.BranchDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(BranchDetail)5676_storage"
      },
      "t_struct(BranchDetail)5676_storage": {
        "encoding": "inplace",
        "label": "struct ISocotraFactory.BranchDetail",
        "members": [
          {
            "astId": 5671,
            "contract": "contracts/SocotraFactory.sol:SocotraFactory",
            "label": "branchAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5673,
            "contract": "contracts/SocotraFactory.sol:SocotraFactory",
            "label": "parentToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5675,
            "contract": "contracts/SocotraFactory.sol:SocotraFactory",
            "label": "issuer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}